node {
	echo "===========================checking out the code==================================================="
	echo 'Checking out the code'
   
    stage('checkout') {
	 git url: 'https://github.com/mailtorajit/couponapp.git'
    // some block
	echo 'checkedout the code'
	echo "================================================================================================="
	}
	stage('clean project'){
		echo "=============================cleaning the project======================================================="
		echo "PATH = ${PATH}"
    	//echo "M2_HOME = ${M2_HOME}"
		bat 'mvn clean'
		echo "================================================================================================="
	}
	stage('compile'){
		echo "==============================compiling the project================================================="
		echo "PATH = ${PATH}"
    	//echo "M2_HOME = ${M2_HOME}"
		bat 'mvn compile'
		echo "================================================================================================="
	}
	stage('SonarQube analysis') {
		echo "====================================sonarqube analysis started============================================="
       	def scannerHome = tool 'My SonarQube Server';
       	echo "Scanner home is"
		echo scannerHome
		//https://blog.sonarsource.com/breaking-the-sonarqube-analysis-with-jenkins-pipelines/
     	withSonarQubeEnv('SonarQube Scanner') {
        bat "${scannerHome}/bin/sonar-scanner.bat"
        echo "=================================================================================================" 
    	}
	}
	sleep(10)
	 stage("SonarQube Quality Gate") {
	 	echo "===========================check sonar quality gate==================================================" 
        timeout(time: 30, unit: 'SECONDS') { 
           def qg = waitForQualityGate() 
           if (qg.status != 'OK') {
             error "Pipeline aborted due to quality gate failure: ${qg.status}"
           }
        }
        echo "================================================================================================="
    }
    step([$class: 'JacocoPublisher',
      execPattern:'**/**.exec',
      classPattern: '**/target/classes',
      sourcePattern: '**/src/main/java'])
      
	stage('test execute'){
		echo 'inside test'
		bat 'mvn test -Dmaven.compile.skip=true'
	}
   	stage('deploy') {
    	// some block
    	echo 'inside deploy'
    	bat 'mvn deploy -Dmaven.compile.skip=true -Dmaven.test.skip=true'
	}

}
